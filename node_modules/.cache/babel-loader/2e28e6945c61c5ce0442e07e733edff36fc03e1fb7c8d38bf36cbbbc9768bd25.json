{"ast":null,"code":"// \"use client\"\n\n// import { useState, useEffect } from \"react\"\n// import NavbarAdmin from \"../../components/NavbarAdmin\"\n// import Seat from \"../../components/Seat\"\n// import SeatLegend from \"../../components/SeatLegend\"\n// import ScheduleControls from \"../../components/ScheduleControls\"\n// import ScreenHeader from \"../../components/ScreenHeader\"\n// import \"../styles/BookingManagement.css\"\n// import { mockMovies, mockCinemas, mockSeats } from \"../../data/mockData\"\n// import { generateMockSeats } from \"../../data/generateMockSeats\"\n\n// interface AdminSeatData {\n//   id: string\n//   row: string\n//   number: number\n//   status: \"available\" | \"sold\" // For Seat component\n//   actualStatus: \"available\" | \"reserved\" | \"sold\" // Internal tracking\n//   username: string\n// }\n\n// const BookingManagement = () => {\n//   const [selectedMovie, setSelectedMovie] = useState(\"\")\n//   const [selectedLocation, setSelectedLocation] = useState(\"\")\n//   const [selectedDate, setSelectedDate] = useState(\"\")\n//   const [selectedTime, setSelectedTime] = useState(\"\")\n//   const [seats, setSeats] = useState<AdminSeatData[][]>([])\n//   const [selectedSeat, setSelectedSeat] = useState<{ row: number; col: number } | null>(null)\n//   const [showDetails, setShowDetails] = useState(false)\n\n//   // Initialize seats based on selection\n//   useEffect(() => {\n//     if (selectedMovie && selectedLocation && selectedDate && selectedTime) {\n//       setShowDetails(true)\n//       // Find matching screening or generate new seats\n//       const screening = mockSeats.find(\n//         (s) =>\n//           s.movieId.toString() === selectedMovie &&\n//           s.cinema === selectedLocation &&\n//           s.date === selectedDate &&\n//           s.time === selectedTime,\n//       )\n\n//       const movie = mockMovies.find((m) => m.id.toString() === selectedMovie)\n\n//       const seatData =\n//         screening?.seats ||\n//         generateMockSeats(\n//           Number.parseInt(selectedMovie),\n//           selectedLocation,\n//           selectedDate,\n//           selectedTime,\n//           Math.floor(Math.random() * 10), // Random sold seats\n//         ).seats\n\n//       // Update the seat generation in useEffect\n//       const formattedSeats = Array.from({ length: 5 }, (_, i) =>\n//         Array.from({ length: 10 }, (_, j) => {\n//           const seatId = `seat-${i}-${j}`\n//           const existingSeat = seatData.find((s) => s.id === seatId)\n//           return {\n//             id: seatId,\n//             row: `Row ${i + 1}`,\n//             number: j + 1,\n//             status: existingSeat?.status === \"sold\" ? (\"sold\" as const) : (\"available\" as const),\n//             actualStatus:\n//               existingSeat?.status === \"sold\"\n//                 ? (\"sold\" as const)\n//                 : Math.random() > 0.8\n//                   ? (\"reserved\" as const)\n//                   : (\"available\" as const),\n//             username: Math.random() > 0.8 ? \"user@example.com\" : \"\",\n//           }\n//         }),\n//       )\n//       setSeats(formattedSeats)\n//     } else {\n//       setShowDetails(false)\n//     }\n//   }, [selectedMovie, selectedLocation, selectedDate, selectedTime])\n\n//   const handleSeatClick = (rowIndex: number, colIndex: number) => {\n//     const seat = seats[rowIndex][colIndex]\n\n//     setSelectedSeat((prev) =>\n//       prev?.row === rowIndex && prev?.col === colIndex ? null : { row: rowIndex, col: colIndex },\n//     )\n\n//     if (seat.actualStatus === \"reserved\") {\n//       if (window.confirm(`Remove reservation for ${seat.username || \"unknown user\"}?`)) {\n//         const newSeats = [...seats]\n//         newSeats[rowIndex][colIndex] = {\n//           ...seat,\n//           status: \"available\",\n//           actualStatus: \"available\",\n//           username: \"\",\n//         }\n//         setSeats(newSeats)\n//       }\n//     } else if (seat.actualStatus === \"available\") {\n//       // Mark as sold (in real app, would have payment flow)\n//       const newSeats = [...seats]\n//       newSeats[rowIndex][colIndex] = {\n//         ...seat,\n//         status: \"sold\",\n//         actualStatus: \"sold\",\n//         username: \"admin@system.com\",\n//       }\n//       setSeats(newSeats)\n//     }\n//   }\n\n//   const toSeatProps = (seat: AdminSeatData) => ({\n//     id: seat.id,\n//     row: seat.row,\n//     number: seat.number,\n//     status: seat.status,\n//   })\n\n//   const getBookingStats = () => {\n//     let available = 0\n//     let reserved = 0\n//     let sold = 0\n\n//     seats.forEach((row) => {\n//       row.forEach((seat) => {\n//         if (seat.actualStatus === \"available\") available++\n//         else if (seat.actualStatus === \"reserved\") reserved++\n//         else if (seat.actualStatus === \"sold\") sold++\n//       })\n//     })\n\n//     const total = available + reserved + sold\n//     const occupancyRate = total > 0 ? Math.round(((reserved + sold) / total) * 100) : 0\n\n//     return { available, reserved, sold, total, occupancyRate }\n//   }\n\n//   const movie = selectedMovie ? mockMovies.find((m) => m.id.toString() === selectedMovie) : null\n\n//   return (\n//     <div className=\"booking-management\">\n//       <NavbarAdmin />\n\n//       <div className=\"admin-container\">\n//         <h1 className=\"admin-title\">Booking Management</h1>\n\n//         <ScheduleControls\n//           selectedMovie={selectedMovie}\n//           setSelectedMovie={setSelectedMovie}\n//           selectedLocation={selectedLocation}\n//           setSelectedLocation={setSelectedLocation}\n//           selectedDate={selectedDate}\n//           setSelectedDate={setSelectedDate}\n//           selectedTime={selectedTime}\n//           setSelectedTime={setSelectedTime}\n//           movies={mockMovies}\n//           cinemas={mockCinemas}\n//         />\n\n//         {showDetails && movie && (\n//           <>\n//             <ScreenHeader movieTitle={movie.title} cinema={selectedLocation} date={selectedDate} time={selectedTime} />\n\n//             <div className=\"screen-label\">Screen</div>\n\n//             <div className=\"seat-layout\">\n//               {seats.map((row, rowIndex) => (\n//                 <div key={`row-${rowIndex}`} className=\"seat-row\">\n//                   <div className=\"row-label\">{row[0].row}</div>\n//                   {row.map((seat, colIndex) => (\n//                     <div key={seat.id} className=\"seat-container\">\n//                       <Seat\n//                         seat={toSeatProps(seat)}\n//                         isSelected={selectedSeat?.row === rowIndex && selectedSeat?.col === colIndex}\n//                         onClick={() => handleSeatClick(rowIndex, colIndex)}\n//                       />\n//                       {seat.actualStatus === \"reserved\" && (\n//                         <span className=\"reserved-badge\" title={`Reserved by ${seat.username}`}>\n//                           R\n//                         </span>\n//                       )}\n//                     </div>\n//                   ))}\n//                 </div>\n//               ))}\n//             </div>\n\n//             <SeatLegend />\n\n//             {/* Booking Statistics */}\n//             {seats.length > 0 && (\n//               <div className=\"booking-stats\">\n//                 <h3>Booking Statistics</h3>\n//                 <div className=\"stats-grid\">\n//                   {(() => {\n//                     const { available, reserved, sold, total, occupancyRate } = getBookingStats()\n//                     return (\n//                       <>\n//                         <div className=\"stat-item\">\n//                           <span className=\"stat-label\">Available:</span>\n//                           <span className=\"stat-value\">{available}</span>\n//                         </div>\n//                         <div className=\"stat-item\">\n//                           <span className=\"stat-label\">Reserved:</span>\n//                           <span className=\"stat-value\">{reserved}</span>\n//                         </div>\n//                         <div className=\"stat-item\">\n//                           <span className=\"stat-label\">Sold:</span>\n//                           <span className=\"stat-value\">{sold}</span>\n//                         </div>\n//                         <div className=\"stat-item\">\n//                           <span className=\"stat-label\">Total Seats:</span>\n//                           <span className=\"stat-value\">{total}</span>\n//                         </div>\n//                         <div className=\"stat-item\">\n//                           <span className=\"stat-label\">Occupancy Rate:</span>\n//                           <span className=\"stat-value\">{occupancyRate}%</span>\n//                         </div>\n//                       </>\n//                     )\n//                   })()}\n//                 </div>\n//               </div>\n//             )}\n//           </>\n//         )}\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default BookingManagement","map":{"version":3,"names":[],"sources":["C:/Users/User/Documents/GitHub/ccv-movie-frontend/src/admins/pages/BookingManagement.tsx"],"sourcesContent":["// \"use client\"\r\n\r\n// import { useState, useEffect } from \"react\"\r\n// import NavbarAdmin from \"../../components/NavbarAdmin\"\r\n// import Seat from \"../../components/Seat\"\r\n// import SeatLegend from \"../../components/SeatLegend\"\r\n// import ScheduleControls from \"../../components/ScheduleControls\"\r\n// import ScreenHeader from \"../../components/ScreenHeader\"\r\n// import \"../styles/BookingManagement.css\"\r\n// import { mockMovies, mockCinemas, mockSeats } from \"../../data/mockData\"\r\n// import { generateMockSeats } from \"../../data/generateMockSeats\"\r\n\r\n// interface AdminSeatData {\r\n//   id: string\r\n//   row: string\r\n//   number: number\r\n//   status: \"available\" | \"sold\" // For Seat component\r\n//   actualStatus: \"available\" | \"reserved\" | \"sold\" // Internal tracking\r\n//   username: string\r\n// }\r\n\r\n// const BookingManagement = () => {\r\n//   const [selectedMovie, setSelectedMovie] = useState(\"\")\r\n//   const [selectedLocation, setSelectedLocation] = useState(\"\")\r\n//   const [selectedDate, setSelectedDate] = useState(\"\")\r\n//   const [selectedTime, setSelectedTime] = useState(\"\")\r\n//   const [seats, setSeats] = useState<AdminSeatData[][]>([])\r\n//   const [selectedSeat, setSelectedSeat] = useState<{ row: number; col: number } | null>(null)\r\n//   const [showDetails, setShowDetails] = useState(false)\r\n\r\n//   // Initialize seats based on selection\r\n//   useEffect(() => {\r\n//     if (selectedMovie && selectedLocation && selectedDate && selectedTime) {\r\n//       setShowDetails(true)\r\n//       // Find matching screening or generate new seats\r\n//       const screening = mockSeats.find(\r\n//         (s) =>\r\n//           s.movieId.toString() === selectedMovie &&\r\n//           s.cinema === selectedLocation &&\r\n//           s.date === selectedDate &&\r\n//           s.time === selectedTime,\r\n//       )\r\n\r\n//       const movie = mockMovies.find((m) => m.id.toString() === selectedMovie)\r\n\r\n//       const seatData =\r\n//         screening?.seats ||\r\n//         generateMockSeats(\r\n//           Number.parseInt(selectedMovie),\r\n//           selectedLocation,\r\n//           selectedDate,\r\n//           selectedTime,\r\n//           Math.floor(Math.random() * 10), // Random sold seats\r\n//         ).seats\r\n\r\n//       // Update the seat generation in useEffect\r\n//       const formattedSeats = Array.from({ length: 5 }, (_, i) =>\r\n//         Array.from({ length: 10 }, (_, j) => {\r\n//           const seatId = `seat-${i}-${j}`\r\n//           const existingSeat = seatData.find((s) => s.id === seatId)\r\n//           return {\r\n//             id: seatId,\r\n//             row: `Row ${i + 1}`,\r\n//             number: j + 1,\r\n//             status: existingSeat?.status === \"sold\" ? (\"sold\" as const) : (\"available\" as const),\r\n//             actualStatus:\r\n//               existingSeat?.status === \"sold\"\r\n//                 ? (\"sold\" as const)\r\n//                 : Math.random() > 0.8\r\n//                   ? (\"reserved\" as const)\r\n//                   : (\"available\" as const),\r\n//             username: Math.random() > 0.8 ? \"user@example.com\" : \"\",\r\n//           }\r\n//         }),\r\n//       )\r\n//       setSeats(formattedSeats)\r\n//     } else {\r\n//       setShowDetails(false)\r\n//     }\r\n//   }, [selectedMovie, selectedLocation, selectedDate, selectedTime])\r\n\r\n//   const handleSeatClick = (rowIndex: number, colIndex: number) => {\r\n//     const seat = seats[rowIndex][colIndex]\r\n\r\n//     setSelectedSeat((prev) =>\r\n//       prev?.row === rowIndex && prev?.col === colIndex ? null : { row: rowIndex, col: colIndex },\r\n//     )\r\n\r\n//     if (seat.actualStatus === \"reserved\") {\r\n//       if (window.confirm(`Remove reservation for ${seat.username || \"unknown user\"}?`)) {\r\n//         const newSeats = [...seats]\r\n//         newSeats[rowIndex][colIndex] = {\r\n//           ...seat,\r\n//           status: \"available\",\r\n//           actualStatus: \"available\",\r\n//           username: \"\",\r\n//         }\r\n//         setSeats(newSeats)\r\n//       }\r\n//     } else if (seat.actualStatus === \"available\") {\r\n//       // Mark as sold (in real app, would have payment flow)\r\n//       const newSeats = [...seats]\r\n//       newSeats[rowIndex][colIndex] = {\r\n//         ...seat,\r\n//         status: \"sold\",\r\n//         actualStatus: \"sold\",\r\n//         username: \"admin@system.com\",\r\n//       }\r\n//       setSeats(newSeats)\r\n//     }\r\n//   }\r\n\r\n//   const toSeatProps = (seat: AdminSeatData) => ({\r\n//     id: seat.id,\r\n//     row: seat.row,\r\n//     number: seat.number,\r\n//     status: seat.status,\r\n//   })\r\n\r\n//   const getBookingStats = () => {\r\n//     let available = 0\r\n//     let reserved = 0\r\n//     let sold = 0\r\n\r\n//     seats.forEach((row) => {\r\n//       row.forEach((seat) => {\r\n//         if (seat.actualStatus === \"available\") available++\r\n//         else if (seat.actualStatus === \"reserved\") reserved++\r\n//         else if (seat.actualStatus === \"sold\") sold++\r\n//       })\r\n//     })\r\n\r\n//     const total = available + reserved + sold\r\n//     const occupancyRate = total > 0 ? Math.round(((reserved + sold) / total) * 100) : 0\r\n\r\n//     return { available, reserved, sold, total, occupancyRate }\r\n//   }\r\n\r\n//   const movie = selectedMovie ? mockMovies.find((m) => m.id.toString() === selectedMovie) : null\r\n\r\n//   return (\r\n//     <div className=\"booking-management\">\r\n//       <NavbarAdmin />\r\n\r\n//       <div className=\"admin-container\">\r\n//         <h1 className=\"admin-title\">Booking Management</h1>\r\n\r\n//         <ScheduleControls\r\n//           selectedMovie={selectedMovie}\r\n//           setSelectedMovie={setSelectedMovie}\r\n//           selectedLocation={selectedLocation}\r\n//           setSelectedLocation={setSelectedLocation}\r\n//           selectedDate={selectedDate}\r\n//           setSelectedDate={setSelectedDate}\r\n//           selectedTime={selectedTime}\r\n//           setSelectedTime={setSelectedTime}\r\n//           movies={mockMovies}\r\n//           cinemas={mockCinemas}\r\n//         />\r\n\r\n//         {showDetails && movie && (\r\n//           <>\r\n//             <ScreenHeader movieTitle={movie.title} cinema={selectedLocation} date={selectedDate} time={selectedTime} />\r\n\r\n//             <div className=\"screen-label\">Screen</div>\r\n\r\n//             <div className=\"seat-layout\">\r\n//               {seats.map((row, rowIndex) => (\r\n//                 <div key={`row-${rowIndex}`} className=\"seat-row\">\r\n//                   <div className=\"row-label\">{row[0].row}</div>\r\n//                   {row.map((seat, colIndex) => (\r\n//                     <div key={seat.id} className=\"seat-container\">\r\n//                       <Seat\r\n//                         seat={toSeatProps(seat)}\r\n//                         isSelected={selectedSeat?.row === rowIndex && selectedSeat?.col === colIndex}\r\n//                         onClick={() => handleSeatClick(rowIndex, colIndex)}\r\n//                       />\r\n//                       {seat.actualStatus === \"reserved\" && (\r\n//                         <span className=\"reserved-badge\" title={`Reserved by ${seat.username}`}>\r\n//                           R\r\n//                         </span>\r\n//                       )}\r\n//                     </div>\r\n//                   ))}\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n\r\n//             <SeatLegend />\r\n\r\n//             {/* Booking Statistics */}\r\n//             {seats.length > 0 && (\r\n//               <div className=\"booking-stats\">\r\n//                 <h3>Booking Statistics</h3>\r\n//                 <div className=\"stats-grid\">\r\n//                   {(() => {\r\n//                     const { available, reserved, sold, total, occupancyRate } = getBookingStats()\r\n//                     return (\r\n//                       <>\r\n//                         <div className=\"stat-item\">\r\n//                           <span className=\"stat-label\">Available:</span>\r\n//                           <span className=\"stat-value\">{available}</span>\r\n//                         </div>\r\n//                         <div className=\"stat-item\">\r\n//                           <span className=\"stat-label\">Reserved:</span>\r\n//                           <span className=\"stat-value\">{reserved}</span>\r\n//                         </div>\r\n//                         <div className=\"stat-item\">\r\n//                           <span className=\"stat-label\">Sold:</span>\r\n//                           <span className=\"stat-value\">{sold}</span>\r\n//                         </div>\r\n//                         <div className=\"stat-item\">\r\n//                           <span className=\"stat-label\">Total Seats:</span>\r\n//                           <span className=\"stat-value\">{total}</span>\r\n//                         </div>\r\n//                         <div className=\"stat-item\">\r\n//                           <span className=\"stat-label\">Occupancy Rate:</span>\r\n//                           <span className=\"stat-value\">{occupancyRate}%</span>\r\n//                         </div>\r\n//                       </>\r\n//                     )\r\n//                   })()}\r\n//                 </div>\r\n//               </div>\r\n//             )}\r\n//           </>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// export default BookingManagement\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}