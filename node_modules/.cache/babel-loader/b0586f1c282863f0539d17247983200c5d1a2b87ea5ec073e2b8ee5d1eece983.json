{"ast":null,"code":"import apiRoutes from \"../config/apiRoutes\";\nexport const getScreeningWithSeats = async screeningId => {\n  try {\n    const res = await fetch(apiRoutes.screenings.getDetails(screeningId));\n    const json = await res.json();\n    if (!res.ok) {\n      throw new Error(json.message || \"Failed to fetch screening data\");\n    }\n    return {\n      success: true,\n      data: json.data,\n      message: json.message\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || \"Unknown error\"\n    };\n  }\n};\nexport const getScreeningsByRoom = async roomId => {\n  try {\n    const res = await fetch(apiRoutes.screenings.getByRoom(roomId));\n    const json = await res.json();\n    if (!res.ok) {\n      throw new Error(json.message || \"Failed to fetch screenings\");\n    }\n    return {\n      success: true,\n      data: json.data,\n      message: json.message\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || \"Unknown error\"\n    };\n  }\n};\nexport const addScreening = async screeningData => {\n  try {\n    const res = await fetch(apiRoutes.screenings.add, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(screeningData)\n    });\n    const json = await res.json();\n    if (!res.ok) {\n      throw new Error(json.message || \"Failed to add screening\");\n    }\n    return {\n      success: true,\n      message: json.message,\n      data: json.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || \"Unknown error\"\n    };\n  }\n};\nexport const deleteScreening = async screeningId => {\n  try {\n    const res = await fetch(apiRoutes.screenings.delete(screeningId), {\n      method: \"DELETE\"\n    });\n    const json = await res.json();\n    if (!res.ok) {\n      throw new Error(json.message || \"Failed to delete screening\");\n    }\n    return {\n      success: true,\n      message: json.message\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || \"Unknown error\"\n    };\n  }\n};","map":{"version":3,"names":["apiRoutes","getScreeningWithSeats","screeningId","res","fetch","screenings","getDetails","json","ok","Error","message","success","data","error","getScreeningsByRoom","roomId","getByRoom","addScreening","screeningData","add","method","headers","body","JSON","stringify","deleteScreening","delete"],"sources":["C:/Users/User/Documents/GitHub/ccv-movie-frontend/src/services/screeningService.ts"],"sourcesContent":["import apiRoutes from \"../config/apiRoutes\";\r\n\r\nexport const getScreeningWithSeats = async (screeningId: string) => {\r\n    try {\r\n        const res = await fetch(apiRoutes.screenings.getDetails(screeningId));\r\n        const json = await res.json();\r\n\r\n        if (!res.ok) {\r\n            throw new Error(json.message || \"Failed to fetch screening data\");\r\n        }\r\n\r\n        return {\r\n            success: true,\r\n            data: json.data,\r\n            message: json.message,\r\n        };\r\n    } catch (error: any) {\r\n        return {\r\n            success: false,\r\n            message: error.message || \"Unknown error\",\r\n        };\r\n    }\r\n};\r\n\r\nexport const getScreeningsByRoom = async (roomId: string) => {\r\n    try {\r\n        const res = await fetch(apiRoutes.screenings.getByRoom(roomId));\r\n        const json = await res.json();\r\n\r\n        if (!res.ok) {\r\n            throw new Error(json.message || \"Failed to fetch screenings\");\r\n        }\r\n\r\n        return {\r\n            success: true,\r\n            data: json.data,\r\n            message: json.message,\r\n        };\r\n    } catch (error: any) {\r\n        return {\r\n            success: false,\r\n            message: error.message || \"Unknown error\",\r\n        };\r\n    }\r\n};\r\n\r\nexport const addScreening = async (screeningData: {\r\n    movieId: string;\r\n    roomId: string;\r\n    startTime: string;\r\n}) => {\r\n    try {\r\n        const res = await fetch(apiRoutes.screenings.add, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(screeningData),\r\n        });\r\n\r\n        const json = await res.json();\r\n\r\n        if (!res.ok) {\r\n            throw new Error(json.message || \"Failed to add screening\");\r\n        }\r\n\r\n        return {\r\n            success: true,\r\n            message: json.message,\r\n            data: json.data,\r\n        };\r\n    } catch (error: any) {\r\n        return {\r\n            success: false,\r\n            message: error.message || \"Unknown error\",\r\n        };\r\n    }\r\n};\r\n\r\nexport const deleteScreening = async (screeningId: string) => {\r\n    try {\r\n        const res = await fetch(apiRoutes.screenings.delete(screeningId), {\r\n            method: \"DELETE\",\r\n        });\r\n\r\n        const json = await res.json();\r\n\r\n        if (!res.ok) {\r\n            throw new Error(json.message || \"Failed to delete screening\");\r\n        }\r\n\r\n        return {\r\n            success: true,\r\n            message: json.message,\r\n        };\r\n    } catch (error: any) {\r\n        return {\r\n            success: false,\r\n            message: error.message || \"Unknown error\",\r\n        };\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,qBAAqB;AAE3C,OAAO,MAAMC,qBAAqB,GAAG,MAAOC,WAAmB,IAAK;EAChE,IAAI;IACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACJ,SAAS,CAACK,UAAU,CAACC,UAAU,CAACJ,WAAW,CAAC,CAAC;IACrE,MAAMK,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAI,CAAC,CAAC;IAE7B,IAAI,CAACJ,GAAG,CAACK,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,IAAI,gCAAgC,CAAC;IACrE;IAEA,OAAO;MACHC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEL,IAAI,CAACK,IAAI;MACfF,OAAO,EAAEH,IAAI,CAACG;IAClB,CAAC;EACL,CAAC,CAAC,OAAOG,KAAU,EAAE;IACjB,OAAO;MACHF,OAAO,EAAE,KAAK;MACdD,OAAO,EAAEG,KAAK,CAACH,OAAO,IAAI;IAC9B,CAAC;EACL;AACJ,CAAC;AAED,OAAO,MAAMI,mBAAmB,GAAG,MAAOC,MAAc,IAAK;EACzD,IAAI;IACA,MAAMZ,GAAG,GAAG,MAAMC,KAAK,CAACJ,SAAS,CAACK,UAAU,CAACW,SAAS,CAACD,MAAM,CAAC,CAAC;IAC/D,MAAMR,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAI,CAAC,CAAC;IAE7B,IAAI,CAACJ,GAAG,CAACK,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,IAAI,4BAA4B,CAAC;IACjE;IAEA,OAAO;MACHC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEL,IAAI,CAACK,IAAI;MACfF,OAAO,EAAEH,IAAI,CAACG;IAClB,CAAC;EACL,CAAC,CAAC,OAAOG,KAAU,EAAE;IACjB,OAAO;MACHF,OAAO,EAAE,KAAK;MACdD,OAAO,EAAEG,KAAK,CAACH,OAAO,IAAI;IAC9B,CAAC;EACL;AACJ,CAAC;AAED,OAAO,MAAMO,YAAY,GAAG,MAAOC,aAIlC,IAAK;EACF,IAAI;IACA,MAAMf,GAAG,GAAG,MAAMC,KAAK,CAACJ,SAAS,CAACK,UAAU,CAACc,GAAG,EAAE;MAC9CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,aAAa;IACtC,CAAC,CAAC;IAEF,MAAMX,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAI,CAAC,CAAC;IAE7B,IAAI,CAACJ,GAAG,CAACK,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,IAAI,yBAAyB,CAAC;IAC9D;IAEA,OAAO;MACHC,OAAO,EAAE,IAAI;MACbD,OAAO,EAAEH,IAAI,CAACG,OAAO;MACrBE,IAAI,EAAEL,IAAI,CAACK;IACf,CAAC;EACL,CAAC,CAAC,OAAOC,KAAU,EAAE;IACjB,OAAO;MACHF,OAAO,EAAE,KAAK;MACdD,OAAO,EAAEG,KAAK,CAACH,OAAO,IAAI;IAC9B,CAAC;EACL;AACJ,CAAC;AAED,OAAO,MAAMe,eAAe,GAAG,MAAOvB,WAAmB,IAAK;EAC1D,IAAI;IACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACJ,SAAS,CAACK,UAAU,CAACqB,MAAM,CAACxB,WAAW,CAAC,EAAE;MAC9DkB,MAAM,EAAE;IACZ,CAAC,CAAC;IAEF,MAAMb,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAI,CAAC,CAAC;IAE7B,IAAI,CAACJ,GAAG,CAACK,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,IAAI,4BAA4B,CAAC;IACjE;IAEA,OAAO;MACHC,OAAO,EAAE,IAAI;MACbD,OAAO,EAAEH,IAAI,CAACG;IAClB,CAAC;EACL,CAAC,CAAC,OAAOG,KAAU,EAAE;IACjB,OAAO;MACHF,OAAO,EAAE,KAAK;MACdD,OAAO,EAAEG,KAAK,CAACH,OAAO,IAAI;IAC9B,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}