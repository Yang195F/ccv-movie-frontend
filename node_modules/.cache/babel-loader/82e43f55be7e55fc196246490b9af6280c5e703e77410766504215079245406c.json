{"ast":null,"code":"// import React, { useState } from \"react\";\n// import NavbarAdmin from \"../../components/NavbarAdmin\";\n// import Seat from \"../../components/Seat\";\n// import ScheduleControls from \"../../components/ScheduleControls\";\n// import \"../styles/BookingManagement.css\";\n// import { SeatProps } from \"../../interfaces/seats\";\n\n// // Extended interface for admin functionality\n// interface AdminSeatData extends SeatProps {\n//   username: string;\n//   actualStatus: \"available\" | \"reserved\" | \"sold\"; // Internal status tracking\n// }\n\n// const BookingManagement = () => {\n//   const [selectedMovie, setSelectedMovie] = useState(\"\");\n//   const [selectedLocation, setSelectedLocation] = useState(\"\");\n//   const [selectedDate, setSelectedDate] = useState(\"\");\n//   const [selectedTime, setSelectedTime] = useState(\"\");\n//   const [seats, setSeats] = useState<AdminSeatData[][]>(generateSeats());\n//   const [selectedSeat, setSelectedSeat] = useState<{row: number, col: number} | null>(null);\n\n//   function generateSeats(): AdminSeatData[][] {\n//     let seatLayout: AdminSeatData[][] = [];\n//     for (let i = 0; i < 5; i++) {\n//       let row: AdminSeatData[] = [];\n//       for (let j = 0; j < 10; j++) {\n//         row.push({\n//           id: `seat-${i}-${j}`,\n//           row: `Row ${i+1}`,\n//           number: j+1,\n//           status: \"available\", // This will be the displayed status\n//           actualStatus: \"available\", // This tracks the real status\n//           username: \"\"\n//         });\n//       }\n//       seatLayout.push(row);\n//     }\n//     return seatLayout;\n//   }\n\n//   const handleSeatClick = (rowIndex: number, colIndex: number) => {\n//     setSelectedSeat(prev => \n//       prev?.row === rowIndex && prev?.col === colIndex ? null : {row: rowIndex, col: colIndex}\n//     );\n\n//     let newSeats = [...seats];\n//     let seat = newSeats[rowIndex][colIndex];\n\n//     if (seat.actualStatus === \"reserved\") {\n//       if (window.confirm(\"Remove this reservation?\")) {\n//         // Update both the displayed status and actual status\n//         newSeats[rowIndex][colIndex] = {\n//           ...seat,\n//           status: \"available\",\n//           actualStatus: \"available\",\n//           username: \"\"\n//         };\n//         setSeats(newSeats);\n//       }\n//     }\n//   };\n\n//   // Convert internal seat data to props expected by Seat component\n//   const getSeatProps = (seat: AdminSeatData): SeatProps => {\n//     return {\n//       id: seat.id,\n//       row: seat.row,\n//       number: seat.number,\n//       status: seat.actualStatus === \"reserved\" ? \"sold\" : seat.actualStatus\n//     };\n//   };\n\n//   return (\n//     <div className=\"booking-management\">\n//       <NavbarAdmin />\n\n//       <ScheduleControls\n//         selectedMovie={selectedMovie}\n//         setSelectedMovie={setSelectedMovie}\n//         selectedLocation={selectedLocation}\n//         setSelectedLocation={setSelectedLocation}\n//         selectedDate={selectedDate}\n//         setSelectedDate={setSelectedDate}\n//         selectedTime={selectedTime}\n//         setSelectedTime={setSelectedTime}\n//       />\n\n//       <div className=\"seat-layout\">\n//         {seats.map((row, rowIndex) => (\n//           <div key={`row-${rowIndex}`} className=\"seat-row\">\n//             {row.map((seat, colIndex) => (\n//               <Seat\n//                 key={seat.id}\n//                 seat={getSeatProps(seat)}\n//                 isSelected={selectedSeat?.row === rowIndex && selectedSeat?.col === colIndex}\n//                 onClick={() => handleSeatClick(rowIndex, colIndex)}\n//               />\n//             ))}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default BookingManagement;","map":{"version":3,"names":[],"sources":["C:/Users/User/Documents/GitHub/ccv-movie-frontend/src/admins/pages/BookingManagement.tsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import NavbarAdmin from \"../../components/NavbarAdmin\";\r\n// import Seat from \"../../components/Seat\";\r\n// import ScheduleControls from \"../../components/ScheduleControls\";\r\n// import \"../styles/BookingManagement.css\";\r\n// import { SeatProps } from \"../../interfaces/seats\";\r\n\r\n// // Extended interface for admin functionality\r\n// interface AdminSeatData extends SeatProps {\r\n//   username: string;\r\n//   actualStatus: \"available\" | \"reserved\" | \"sold\"; // Internal status tracking\r\n// }\r\n\r\n// const BookingManagement = () => {\r\n//   const [selectedMovie, setSelectedMovie] = useState(\"\");\r\n//   const [selectedLocation, setSelectedLocation] = useState(\"\");\r\n//   const [selectedDate, setSelectedDate] = useState(\"\");\r\n//   const [selectedTime, setSelectedTime] = useState(\"\");\r\n//   const [seats, setSeats] = useState<AdminSeatData[][]>(generateSeats());\r\n//   const [selectedSeat, setSelectedSeat] = useState<{row: number, col: number} | null>(null);\r\n\r\n//   function generateSeats(): AdminSeatData[][] {\r\n//     let seatLayout: AdminSeatData[][] = [];\r\n//     for (let i = 0; i < 5; i++) {\r\n//       let row: AdminSeatData[] = [];\r\n//       for (let j = 0; j < 10; j++) {\r\n//         row.push({\r\n//           id: `seat-${i}-${j}`,\r\n//           row: `Row ${i+1}`,\r\n//           number: j+1,\r\n//           status: \"available\", // This will be the displayed status\r\n//           actualStatus: \"available\", // This tracks the real status\r\n//           username: \"\"\r\n//         });\r\n//       }\r\n//       seatLayout.push(row);\r\n//     }\r\n//     return seatLayout;\r\n//   }\r\n\r\n//   const handleSeatClick = (rowIndex: number, colIndex: number) => {\r\n//     setSelectedSeat(prev => \r\n//       prev?.row === rowIndex && prev?.col === colIndex ? null : {row: rowIndex, col: colIndex}\r\n//     );\r\n\r\n//     let newSeats = [...seats];\r\n//     let seat = newSeats[rowIndex][colIndex];\r\n    \r\n//     if (seat.actualStatus === \"reserved\") {\r\n//       if (window.confirm(\"Remove this reservation?\")) {\r\n//         // Update both the displayed status and actual status\r\n//         newSeats[rowIndex][colIndex] = {\r\n//           ...seat,\r\n//           status: \"available\",\r\n//           actualStatus: \"available\",\r\n//           username: \"\"\r\n//         };\r\n//         setSeats(newSeats);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   // Convert internal seat data to props expected by Seat component\r\n//   const getSeatProps = (seat: AdminSeatData): SeatProps => {\r\n//     return {\r\n//       id: seat.id,\r\n//       row: seat.row,\r\n//       number: seat.number,\r\n//       status: seat.actualStatus === \"reserved\" ? \"sold\" : seat.actualStatus\r\n//     };\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"booking-management\">\r\n//       <NavbarAdmin />\r\n      \r\n//       <ScheduleControls\r\n//         selectedMovie={selectedMovie}\r\n//         setSelectedMovie={setSelectedMovie}\r\n//         selectedLocation={selectedLocation}\r\n//         setSelectedLocation={setSelectedLocation}\r\n//         selectedDate={selectedDate}\r\n//         setSelectedDate={setSelectedDate}\r\n//         selectedTime={selectedTime}\r\n//         setSelectedTime={setSelectedTime}\r\n//       />\r\n      \r\n//       <div className=\"seat-layout\">\r\n//         {seats.map((row, rowIndex) => (\r\n//           <div key={`row-${rowIndex}`} className=\"seat-row\">\r\n//             {row.map((seat, colIndex) => (\r\n//               <Seat\r\n//                 key={seat.id}\r\n//                 seat={getSeatProps(seat)}\r\n//                 isSelected={selectedSeat?.row === rowIndex && selectedSeat?.col === colIndex}\r\n//                 onClick={() => handleSeatClick(rowIndex, colIndex)}\r\n//               />\r\n//             ))}\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default BookingManagement;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}