{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\ccv-movie-frontend\\\\src\\\\admins\\\\pages\\\\BookingManagement.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport NavbarAdmin from \"../../components/NavbarAdmin\";\nimport Seat from \"../../components/Seat\";\nimport SeatLegend from \"../../components/SeatLegend\";\nimport ScheduleControls from \"../../components/ScheduleControls\";\nimport ScreenHeader from \"../../components/ScreenHeader\";\nimport \"../styles/BookingManagement.css\";\nimport { mockMovies, mockCinemas, mockSeats } from \"../../data/mockData\";\nimport { generateMockSeats } from \"../../data/generateMockSeats\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BookingManagement = () => {\n  _s();\n  const [selectedMovie, setSelectedMovie] = useState(\"\");\n  const [selectedLocation, setSelectedLocation] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  const [selectedTime, setSelectedTime] = useState(\"\");\n  const [seats, setSeats] = useState([]);\n  const [selectedSeat, setSelectedSeat] = useState(null);\n  const [showDetails, setShowDetails] = useState(false);\n\n  // Initialize seats based on selection\n  useEffect(() => {\n    if (selectedMovie && selectedLocation && selectedDate && selectedTime) {\n      setShowDetails(true);\n      // Find matching screening or generate new seats\n      const screening = mockSeats.find(s => s.movieId.toString() === selectedMovie && s.cinema === selectedLocation && s.date === selectedDate && s.time === selectedTime);\n      const movie = mockMovies.find(m => m.id.toString() === selectedMovie);\n      const seatData = (screening === null || screening === void 0 ? void 0 : screening.seats) || generateMockSeats(Number.parseInt(selectedMovie), selectedLocation, selectedDate, selectedTime, Math.floor(Math.random() * 10) // Random sold seats\n      ).seats;\n\n      // Update the seat generation in useEffect\n      const formattedSeats = Array.from({\n        length: 5\n      }, (_, i) => Array.from({\n        length: 10\n      }, (_, j) => {\n        const seatId = `seat-${i}-${j}`;\n        const existingSeat = seatData.find(s => s.id === seatId);\n        return {\n          id: seatId,\n          row: `Row ${i + 1}`,\n          number: j + 1,\n          status: (existingSeat === null || existingSeat === void 0 ? void 0 : existingSeat.status) === \"sold\" ? \"sold\" : \"available\",\n          actualStatus: (existingSeat === null || existingSeat === void 0 ? void 0 : existingSeat.status) === \"sold\" ? \"sold\" : Math.random() > 0.8 ? \"reserved\" : \"available\",\n          username: Math.random() > 0.8 ? \"user@example.com\" : \"\"\n        };\n      }));\n      setSeats(formattedSeats);\n    } else {\n      setShowDetails(false);\n    }\n  }, [selectedMovie, selectedLocation, selectedDate, selectedTime]);\n  const handleSeatClick = (rowIndex, colIndex) => {\n    const seat = seats[rowIndex][colIndex];\n    setSelectedSeat(prev => (prev === null || prev === void 0 ? void 0 : prev.row) === rowIndex && (prev === null || prev === void 0 ? void 0 : prev.col) === colIndex ? null : {\n      row: rowIndex,\n      col: colIndex\n    });\n    if (seat.actualStatus === \"reserved\") {\n      if (window.confirm(`Remove reservation for ${seat.username || \"unknown user\"}?`)) {\n        const newSeats = [...seats];\n        newSeats[rowIndex][colIndex] = {\n          ...seat,\n          status: \"available\",\n          actualStatus: \"available\",\n          username: \"\"\n        };\n        setSeats(newSeats);\n      }\n    } else if (seat.actualStatus === \"available\") {\n      // Mark as sold (in real app, would have payment flow)\n      const newSeats = [...seats];\n      newSeats[rowIndex][colIndex] = {\n        ...seat,\n        status: \"sold\",\n        actualStatus: \"sold\",\n        username: \"admin@system.com\"\n      };\n      setSeats(newSeats);\n    }\n  };\n  const toSeatProps = seat => ({\n    id: seat.id,\n    row: seat.row,\n    number: seat.number,\n    status: seat.status\n  });\n  const getBookingStats = () => {\n    let available = 0;\n    let reserved = 0;\n    let sold = 0;\n    seats.forEach(row => {\n      row.forEach(seat => {\n        if (seat.actualStatus === \"available\") available++;else if (seat.actualStatus === \"reserved\") reserved++;else if (seat.actualStatus === \"sold\") sold++;\n      });\n    });\n    const total = available + reserved + sold;\n    const occupancyRate = total > 0 ? Math.round((reserved + sold) / total * 100) : 0;\n    return {\n      available,\n      reserved,\n      sold,\n      total,\n      occupancyRate\n    };\n  };\n  const movie = selectedMovie ? mockMovies.find(m => m.id.toString() === selectedMovie) : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"booking-management\",\n    children: [/*#__PURE__*/_jsxDEV(NavbarAdmin, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"admin-title\",\n        children: \"Booking Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ScheduleControls, {\n        selectedMovie: selectedMovie,\n        setSelectedMovie: setSelectedMovie,\n        selectedLocation: selectedLocation,\n        setSelectedLocation: setSelectedLocation,\n        selectedDate: selectedDate,\n        setSelectedDate: setSelectedDate,\n        selectedTime: selectedTime,\n        setSelectedTime: setSelectedTime,\n        movies: mockMovies,\n        cinemas: mockCinemas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), showDetails && movie && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ScreenHeader, {\n          movieTitle: movie.title,\n          cinema: selectedLocation,\n          date: selectedDate,\n          time: selectedTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"screen-label\",\n          children: \"Screen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"seat-layout\",\n          children: seats.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"seat-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row-label\",\n              children: row[0].row\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 19\n            }, this), row.map((seat, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"seat-container\",\n              children: [/*#__PURE__*/_jsxDEV(Seat, {\n                seat: toSeatProps(seat),\n                isSelected: (selectedSeat === null || selectedSeat === void 0 ? void 0 : selectedSeat.row) === rowIndex && (selectedSeat === null || selectedSeat === void 0 ? void 0 : selectedSeat.col) === colIndex,\n                onClick: () => handleSeatClick(rowIndex, colIndex)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 23\n              }, this), seat.actualStatus === \"reserved\" && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"reserved-badge\",\n                title: `Reserved by ${seat.username}`,\n                children: \"R\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 25\n              }, this)]\n            }, seat.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 21\n            }, this))]\n          }, `row-${rowIndex}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SeatLegend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), seats.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"booking-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Booking Statistics\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stats-grid\",\n            children: (() => {\n              const {\n                available,\n                reserved,\n                sold,\n                total,\n                occupancyRate\n              } = getBookingStats();\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"stat-label\",\n                    children: \"Available:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 201,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"stat-value\",\n                    children: available\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 202,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"stat-label\",\n                    children: \"Reserved:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 205,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"stat-value\",\n                    children: reserved\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 206,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"stat-label\",\n                    children: \"Sold:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 209,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"stat-value\",\n                    children: sold\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"stat-label\",\n                    children: \"Total Seats:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"stat-value\",\n                    children: total\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 214,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"stat-label\",\n                    children: \"Occupancy Rate:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 217,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"stat-value\",\n                    children: [occupancyRate, \"%\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 218,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true);\n            })()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(BookingManagement, \"VIzORyqo+36bO8wfwBDgy8uu3yM=\");\n_c = BookingManagement;\nexport default BookingManagement;\nvar _c;\n$RefreshReg$(_c, \"BookingManagement\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","NavbarAdmin","Seat","SeatLegend","ScheduleControls","ScreenHeader","mockMovies","mockCinemas","mockSeats","generateMockSeats","jsxDEV","_jsxDEV","Fragment","_Fragment","BookingManagement","selectedMovie","setSelectedMovie","selectedLocation","setSelectedLocation","selectedDate","setSelectedDate","selectedTime","setSelectedTime","seats","setSeats","selectedSeat","setSelectedSeat","showDetails","setShowDetails","screening","find","s","movieId","toString","cinema","date","time","movie","m","id","seatData","Number","parseInt","Math","floor","random","formattedSeats","Array","from","length","_","i","j","seatId","existingSeat","row","number","status","actualStatus","username","handleSeatClick","rowIndex","colIndex","seat","prev","col","window","confirm","newSeats","toSeatProps","getBookingStats","available","reserved","sold","forEach","total","occupancyRate","round","className","children","fileName","lineNumber","columnNumber","movies","cinemas","movieTitle","title","map","isSelected","onClick","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/GitHub/ccv-movie-frontend/src/admins/pages/BookingManagement.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport NavbarAdmin from \"../../components/NavbarAdmin\"\r\nimport Seat from \"../../components/Seat\"\r\nimport SeatLegend from \"../../components/SeatLegend\"\r\nimport ScheduleControls from \"../../components/ScheduleControls\"\r\nimport ScreenHeader from \"../../components/ScreenHeader\"\r\nimport \"../styles/BookingManagement.css\"\r\nimport { mockMovies, mockCinemas, mockSeats } from \"../../data/mockData\"\r\nimport { generateMockSeats } from \"../../data/generateMockSeats\"\r\n\r\ninterface AdminSeatData {\r\n  id: string\r\n  row: string\r\n  number: number\r\n  status: \"available\" | \"sold\" // For Seat component\r\n  actualStatus: \"available\" | \"reserved\" | \"sold\" // Internal tracking\r\n  username: string\r\n}\r\n\r\nconst BookingManagement = () => {\r\n  const [selectedMovie, setSelectedMovie] = useState(\"\")\r\n  const [selectedLocation, setSelectedLocation] = useState(\"\")\r\n  const [selectedDate, setSelectedDate] = useState(\"\")\r\n  const [selectedTime, setSelectedTime] = useState(\"\")\r\n  const [seats, setSeats] = useState<AdminSeatData[][]>([])\r\n  const [selectedSeat, setSelectedSeat] = useState<{ row: number; col: number } | null>(null)\r\n  const [showDetails, setShowDetails] = useState(false)\r\n\r\n  // Initialize seats based on selection\r\n  useEffect(() => {\r\n    if (selectedMovie && selectedLocation && selectedDate && selectedTime) {\r\n      setShowDetails(true)\r\n      // Find matching screening or generate new seats\r\n      const screening = mockSeats.find(\r\n        (s) =>\r\n          s.movieId.toString() === selectedMovie &&\r\n          s.cinema === selectedLocation &&\r\n          s.date === selectedDate &&\r\n          s.time === selectedTime,\r\n      )\r\n\r\n      const movie = mockMovies.find((m) => m.id.toString() === selectedMovie)\r\n\r\n      const seatData =\r\n        screening?.seats ||\r\n        generateMockSeats(\r\n          Number.parseInt(selectedMovie),\r\n          selectedLocation,\r\n          selectedDate,\r\n          selectedTime,\r\n          Math.floor(Math.random() * 10), // Random sold seats\r\n        ).seats\r\n\r\n      // Update the seat generation in useEffect\r\n      const formattedSeats = Array.from({ length: 5 }, (_, i) =>\r\n        Array.from({ length: 10 }, (_, j) => {\r\n          const seatId = `seat-${i}-${j}`\r\n          const existingSeat = seatData.find((s) => s.id === seatId)\r\n          return {\r\n            id: seatId,\r\n            row: `Row ${i + 1}`,\r\n            number: j + 1,\r\n            status: existingSeat?.status === \"sold\" ? (\"sold\" as const) : (\"available\" as const),\r\n            actualStatus:\r\n              existingSeat?.status === \"sold\"\r\n                ? (\"sold\" as const)\r\n                : Math.random() > 0.8\r\n                  ? (\"reserved\" as const)\r\n                  : (\"available\" as const),\r\n            username: Math.random() > 0.8 ? \"user@example.com\" : \"\",\r\n          }\r\n        }),\r\n      )\r\n      setSeats(formattedSeats)\r\n    } else {\r\n      setShowDetails(false)\r\n    }\r\n  }, [selectedMovie, selectedLocation, selectedDate, selectedTime])\r\n\r\n  const handleSeatClick = (rowIndex: number, colIndex: number) => {\r\n    const seat = seats[rowIndex][colIndex]\r\n\r\n    setSelectedSeat((prev) =>\r\n      prev?.row === rowIndex && prev?.col === colIndex ? null : { row: rowIndex, col: colIndex },\r\n    )\r\n\r\n    if (seat.actualStatus === \"reserved\") {\r\n      if (window.confirm(`Remove reservation for ${seat.username || \"unknown user\"}?`)) {\r\n        const newSeats = [...seats]\r\n        newSeats[rowIndex][colIndex] = {\r\n          ...seat,\r\n          status: \"available\",\r\n          actualStatus: \"available\",\r\n          username: \"\",\r\n        }\r\n        setSeats(newSeats)\r\n      }\r\n    } else if (seat.actualStatus === \"available\") {\r\n      // Mark as sold (in real app, would have payment flow)\r\n      const newSeats = [...seats]\r\n      newSeats[rowIndex][colIndex] = {\r\n        ...seat,\r\n        status: \"sold\",\r\n        actualStatus: \"sold\",\r\n        username: \"admin@system.com\",\r\n      }\r\n      setSeats(newSeats)\r\n    }\r\n  }\r\n\r\n  const toSeatProps = (seat: AdminSeatData) => ({\r\n    id: seat.id,\r\n    row: seat.row,\r\n    number: seat.number,\r\n    status: seat.status,\r\n  })\r\n\r\n  const getBookingStats = () => {\r\n    let available = 0\r\n    let reserved = 0\r\n    let sold = 0\r\n\r\n    seats.forEach((row) => {\r\n      row.forEach((seat) => {\r\n        if (seat.actualStatus === \"available\") available++\r\n        else if (seat.actualStatus === \"reserved\") reserved++\r\n        else if (seat.actualStatus === \"sold\") sold++\r\n      })\r\n    })\r\n\r\n    const total = available + reserved + sold\r\n    const occupancyRate = total > 0 ? Math.round(((reserved + sold) / total) * 100) : 0\r\n\r\n    return { available, reserved, sold, total, occupancyRate }\r\n  }\r\n\r\n  const movie = selectedMovie ? mockMovies.find((m) => m.id.toString() === selectedMovie) : null\r\n\r\n  return (\r\n    <div className=\"booking-management\">\r\n      <NavbarAdmin />\r\n\r\n      <div className=\"admin-container\">\r\n        <h1 className=\"admin-title\">Booking Management</h1>\r\n\r\n        <ScheduleControls\r\n          selectedMovie={selectedMovie}\r\n          setSelectedMovie={setSelectedMovie}\r\n          selectedLocation={selectedLocation}\r\n          setSelectedLocation={setSelectedLocation}\r\n          selectedDate={selectedDate}\r\n          setSelectedDate={setSelectedDate}\r\n          selectedTime={selectedTime}\r\n          setSelectedTime={setSelectedTime}\r\n          movies={mockMovies}\r\n          cinemas={mockCinemas}\r\n        />\r\n\r\n        {showDetails && movie && (\r\n          <>\r\n            <ScreenHeader movieTitle={movie.title} cinema={selectedLocation} date={selectedDate} time={selectedTime} />\r\n\r\n            <div className=\"screen-label\">Screen</div>\r\n\r\n            <div className=\"seat-layout\">\r\n              {seats.map((row, rowIndex) => (\r\n                <div key={`row-${rowIndex}`} className=\"seat-row\">\r\n                  <div className=\"row-label\">{row[0].row}</div>\r\n                  {row.map((seat, colIndex) => (\r\n                    <div key={seat.id} className=\"seat-container\">\r\n                      <Seat\r\n                        seat={toSeatProps(seat)}\r\n                        isSelected={selectedSeat?.row === rowIndex && selectedSeat?.col === colIndex}\r\n                        onClick={() => handleSeatClick(rowIndex, colIndex)}\r\n                      />\r\n                      {seat.actualStatus === \"reserved\" && (\r\n                        <span className=\"reserved-badge\" title={`Reserved by ${seat.username}`}>\r\n                          R\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            <SeatLegend />\r\n\r\n            {/* Booking Statistics */}\r\n            {seats.length > 0 && (\r\n              <div className=\"booking-stats\">\r\n                <h3>Booking Statistics</h3>\r\n                <div className=\"stats-grid\">\r\n                  {(() => {\r\n                    const { available, reserved, sold, total, occupancyRate } = getBookingStats()\r\n                    return (\r\n                      <>\r\n                        <div className=\"stat-item\">\r\n                          <span className=\"stat-label\">Available:</span>\r\n                          <span className=\"stat-value\">{available}</span>\r\n                        </div>\r\n                        <div className=\"stat-item\">\r\n                          <span className=\"stat-label\">Reserved:</span>\r\n                          <span className=\"stat-value\">{reserved}</span>\r\n                        </div>\r\n                        <div className=\"stat-item\">\r\n                          <span className=\"stat-label\">Sold:</span>\r\n                          <span className=\"stat-value\">{sold}</span>\r\n                        </div>\r\n                        <div className=\"stat-item\">\r\n                          <span className=\"stat-label\">Total Seats:</span>\r\n                          <span className=\"stat-value\">{total}</span>\r\n                        </div>\r\n                        <div className=\"stat-item\">\r\n                          <span className=\"stat-label\">Occupancy Rate:</span>\r\n                          <span className=\"stat-value\">{occupancyRate}%</span>\r\n                        </div>\r\n                      </>\r\n                    )\r\n                  })()}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BookingManagement\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}