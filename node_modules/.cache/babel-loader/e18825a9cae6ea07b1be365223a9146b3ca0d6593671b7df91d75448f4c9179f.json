{"ast":null,"code":"import apiRoutes from \"../config/apiRoutes\";\nexport const getAllMovies = async (category, bannerOnly = false, genre) => {\n  try {\n    const params = new URLSearchParams();\n    if (category) params.append(\"category\", category);\n    if (bannerOnly) params.append(\"bannerOnly\", \"true\");\n    if (genre) params.append(\"genre\", genre);\n    const response = await fetch(`${apiRoutes.movies.getMovie}?${params.toString()}`);\n    const result = await response.json();\n    if (!response.ok || !result.success) {\n      throw new Error(result.message || \"Failed to fetch movies.\");\n    }\n    return result;\n  } catch (error) {\n    console.error(\"Error fetching movies:\", error);\n    throw error;\n  }\n};\nexport const getMovieById = async id => {\n  try {\n    const response = await fetch(apiRoutes.movies.getDetails(id));\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        success: false,\n        message: data.message || \"Failed to fetch movie details\"\n      };\n    }\n    return {\n      success: true,\n      message: \"Movie details fetched successfully.\",\n      data: data.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || \"Something went wrong\"\n    };\n  }\n};\nexport const getShowtimes = async (cinemaId, movieId) => {\n  try {\n    const response = await fetch(apiRoutes.cinemas.getShowtimes(cinemaId), {\n      method: \"GET\"\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        success: false,\n        message: data.message || \"Failed to fetch showtimes\"\n      };\n    }\n    return {\n      success: true,\n      message: \"Showtimes fetched successfully.\",\n      data: data.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || \"Something went wrong\"\n    };\n  }\n};\nexport const getCinemas = async () => {\n  try {\n    const response = await fetch(apiRoutes.cinemas.getAll);\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        success: false,\n        message: data.message || \"Failed to fetch cinemas\"\n      };\n    }\n    return {\n      success: true,\n      message: \"Cinemas fetched successfully.\",\n      data: data.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || \"Something went wrong\"\n    };\n  }\n};\nexport const getRoomDetails = async roomId => {\n  try {\n    const res = await fetch(`${apiRoutes.cinemas.getRoom(roomId)}`);\n    const data = await res.json();\n    if (!res.ok) throw new Error(data.message || \"Failed to fetch room\");\n    return {\n      success: true,\n      data: data.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message\n    };\n  }\n};","map":{"version":3,"names":["apiRoutes","getAllMovies","category","bannerOnly","genre","params","URLSearchParams","append","response","fetch","movies","getMovie","toString","result","json","ok","success","Error","message","error","console","getMovieById","id","getDetails","data","getShowtimes","cinemaId","movieId","cinemas","method","getCinemas","getAll","getRoomDetails","roomId","res","getRoom"],"sources":["C:/Users/User/Documents/GitHub/ccv-movie-frontend/src/services/movieService.ts"],"sourcesContent":["import apiRoutes from \"../config/apiRoutes\";\r\n\r\nexport const getAllMovies = async (category?: string, bannerOnly: boolean = false, genre?: string) => {\r\n    try {\r\n        const params = new URLSearchParams()\r\n        if (category) params.append(\"category\", category)\r\n        if (bannerOnly) params.append(\"bannerOnly\", \"true\")\r\n        if (genre) params.append(\"genre\", genre)\r\n\r\n        const response = await fetch(`${apiRoutes.movies.getMovie}?${params.toString()}`)\r\n        const result = await response.json()\r\n\r\n        if (!response.ok || !result.success) {\r\n            throw new Error(result.message || \"Failed to fetch movies.\")\r\n        }\r\n\r\n        return result\r\n    } catch (error) {\r\n        console.error(\"Error fetching movies:\", error)\r\n        throw error\r\n    }\r\n}\r\n\r\n\r\nexport const getMovieById = async (id: string) => {\r\n    try {\r\n        const response = await fetch(apiRoutes.movies.getDetails(id));\r\n        const data = await response.json();\r\n\r\n        if (!response.ok) {\r\n            return {\r\n                success: false,\r\n                message: data.message || \"Failed to fetch movie details\",\r\n            };\r\n        }\r\n\r\n        return {\r\n            success: true,\r\n            message: \"Movie details fetched successfully.\",\r\n            data: data.data,\r\n        };\r\n    } catch (error: any) {\r\n        return {\r\n            success: false,\r\n            message: error.message || \"Something went wrong\",\r\n        };\r\n    }\r\n};\r\n\r\n\r\nexport const getShowtimes = async (cinemaId: string, movieId: string) => {\r\n    try {\r\n        const response = await fetch(apiRoutes.cinemas.getShowtimes(cinemaId), {\r\n            method: \"GET\",\r\n        });\r\n        const data = await response.json();\r\n\r\n        if (!response.ok) {\r\n            return {\r\n                success: false,\r\n                message: data.message || \"Failed to fetch showtimes\",\r\n            };\r\n        }\r\n\r\n        return {\r\n            success: true,\r\n            message: \"Showtimes fetched successfully.\",\r\n            data: data.data,\r\n        };\r\n    } catch (error: any) {\r\n        return {\r\n            success: false,\r\n            message: error.message || \"Something went wrong\",\r\n        };\r\n    }\r\n};\r\n\r\n\r\nexport const getCinemas = async () => {\r\n    try {\r\n        const response = await fetch(apiRoutes.cinemas.getAll);\r\n        const data = await response.json();\r\n\r\n        if (!response.ok) {\r\n            return {\r\n                success: false,\r\n                message: data.message || \"Failed to fetch cinemas\",\r\n            };\r\n        }\r\n\r\n        return {\r\n            success: true,\r\n            message: \"Cinemas fetched successfully.\",\r\n            data: data.data,\r\n        };\r\n    } catch (error: any) {\r\n        return {\r\n            success: false,\r\n            message: error.message || \"Something went wrong\",\r\n        };\r\n    }\r\n};\r\n\r\nexport const getRoomDetails = async (roomId: string) => {\r\n    try {\r\n        const res = await fetch(`${apiRoutes.cinemas.getRoom(roomId)}`);\r\n        const data = await res.json();\r\n        if (!res.ok) throw new Error(data.message || \"Failed to fetch room\");\r\n\r\n        return { success: true, data: data.data };\r\n    } catch (error: any) {\r\n        return { success: false, message: error.message };\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}