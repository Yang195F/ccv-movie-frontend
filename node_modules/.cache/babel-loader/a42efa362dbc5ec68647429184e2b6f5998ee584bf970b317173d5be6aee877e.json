{"ast":null,"code":"import apiRoutes from \"../config/apiRoutes\";\nexport const register = async (username, password, email) => {\n  try {\n    const response = await fetch(apiRoutes.auths.register, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password,\n        email\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        success: false,\n        message: data.message || \"Registration failed\"\n      };\n    }\n    return {\n      success: true,\n      message: data.message,\n      data: {\n        userId: data.userId\n      }\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || \"Something went wrong\"\n    };\n  }\n};\nexport const verifyEmail = async (userId, code) => {\n  try {\n    const response = await fetch(apiRoutes.auths.verifyEmail, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        userId,\n        code\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        success: false,\n        message: data.message || \"Verification failed\"\n      };\n    }\n    return {\n      success: true,\n      message: data.message\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || \"An unknown error occurred\"\n    };\n  }\n};\nexport const refreshToken = async refreshToken => {\n  try {\n    const response = await fetch(apiRoutes.auths.refresh, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        RefreshToken: refreshToken\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        success: false,\n        message: data.message || \"Token refresh failed\"\n      };\n    }\n    return {\n      success: true,\n      data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || \"An unknown error occurred\"\n    };\n  }\n};\nexport const login = async (email, password) => {\n  try {\n    const response = await fetch(apiRoutes.auths.login, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        Email: email,\n        Password: password\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        success: false,\n        message: data.message || \"Login failed. Please check your credentials.\"\n      };\n    }\n    return {\n      success: true,\n      data: {\n        token: data.token,\n        refreshToken: data.refreshToken,\n        user: data.user\n      }\n    };\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    return {\n      success: false,\n      message: error.message || \"An unknown error occurred\"\n    };\n  }\n};\nexport const sendResetCode = async email => {\n  const res = await fetch(apiRoutes.auths.forgotPassword, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email\n    })\n  });\n  return await res.json();\n};\nexport const verifyResetCode = async (email, code) => {\n  const res = await fetch(apiRoutes.auths.verifyResetCode, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      code\n    })\n  });\n  return await res.json();\n};\nexport const resetPassword = async (email, newPassword) => {\n  const res = await fetch(apiRoutes.auths.resetPassword, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      newPassword\n    })\n  });\n  return await res.json();\n};\nexport const logout = () => {\n  localStorage.removeItem(\"authToken\");\n  localStorage.removeItem(\"refreshToken\");\n  localStorage.removeItem(\"user\");\n};\nexport const isAuthenticated = () => {\n  return localStorage.getItem(\"authToken\") !== null;\n};\nexport const getCurrentUser = () => {\n  const userStr = localStorage.getItem(\"user\");\n  if (!userStr) return null;\n  try {\n    return JSON.parse(userStr);\n  } catch (e) {\n    return null;\n  }\n};","map":{"version":3,"names":["apiRoutes","register","username","password","email","response","fetch","auths","method","headers","body","JSON","stringify","data","json","ok","success","message","userId","error","verifyEmail","code","refreshToken","refresh","RefreshToken","login","Email","Password","token","user","console","sendResetCode","res","forgotPassword","verifyResetCode","resetPassword","newPassword","logout","localStorage","removeItem","isAuthenticated","getItem","getCurrentUser","userStr","parse","e"],"sources":["C:/Users/User/Documents/GitHub/ccv-movie-frontend/src/services/authService.ts"],"sourcesContent":["import apiRoutes from \"../config/apiRoutes\"\r\n\r\nexport const register = async (username: string, password: string, email: string) => {\r\n    try {\r\n        const response = await fetch(apiRoutes.auths.register, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ username, password, email }),\r\n        })\r\n\r\n        const data = await response.json()\r\n\r\n        if (!response.ok) {\r\n            return {\r\n                success: false,\r\n                message: data.message || \"Registration failed\",\r\n            }\r\n        }\r\n\r\n        return {\r\n            success: true,\r\n            message: data.message,\r\n            data: {\r\n                userId: data.userId,\r\n            },\r\n        }\r\n    } catch (error: any) {\r\n        return {\r\n            success: false,\r\n            message: error.message || \"Something went wrong\",\r\n        }\r\n    }\r\n}\r\n\r\nexport const verifyEmail = async (userId: string, code: string) => {\r\n    try {\r\n        const response = await fetch(apiRoutes.auths.verifyEmail, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ userId, code }),\r\n        })\r\n\r\n        const data = await response.json()\r\n\r\n        if (!response.ok) {\r\n            return {\r\n                success: false,\r\n                message: data.message || \"Verification failed\",\r\n            }\r\n        }\r\n\r\n        return { success: true, message: data.message }\r\n    } catch (error: any) {\r\n        return {\r\n            success: false,\r\n            message: error.message || \"An unknown error occurred\",\r\n        }\r\n    }\r\n}\r\n\r\nexport const refreshToken = async (refreshToken: string) => {\r\n    try {\r\n        const response = await fetch(apiRoutes.auths.refresh, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                RefreshToken: refreshToken,\r\n            }),\r\n        })\r\n\r\n        const data = await response.json()\r\n\r\n        if (!response.ok) {\r\n            return {\r\n                success: false,\r\n                message: data.message || \"Token refresh failed\",\r\n            }\r\n        }\r\n\r\n        return { success: true, data }\r\n    } catch (error: any) {\r\n        return {\r\n            success: false,\r\n            message: error.message || \"An unknown error occurred\",\r\n        }\r\n    }\r\n}\r\n\r\ninterface LoginResponse {\r\n    success: boolean\r\n    message?: string\r\n    data?: {\r\n        token: string\r\n        refreshToken: string\r\n        user: {\r\n            userId: string\r\n            name: string\r\n            email: string\r\n        }\r\n    }\r\n}\r\n\r\nexport const login = async (email: string, password: string): Promise<LoginResponse> => {\r\n    try {\r\n        const response = await fetch(apiRoutes.auths.login, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                Email: email,\r\n                Password: password,\r\n            }),\r\n        })\r\n\r\n        const data = await response.json()\r\n\r\n        if (!response.ok) {\r\n            return {\r\n                success: false,\r\n                message: data.message || \"Login failed. Please check your credentials.\",\r\n            }\r\n        }\r\n\r\n        return {\r\n            success: true,\r\n            data: {\r\n                token: data.token,\r\n                refreshToken: data.refreshToken,\r\n                user: data.user,\r\n            },\r\n        }\r\n    } catch (error: any) {\r\n        console.error(\"Login error:\", error)\r\n        return {\r\n            success: false,\r\n            message: error.message || \"An unknown error occurred\",\r\n        }\r\n    }\r\n}\r\n\r\nexport const sendResetCode = async (email: string) => {\r\n    const res = await fetch(apiRoutes.auths.forgotPassword, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ email }),\r\n    })\r\n    return await res.json()\r\n}\r\n\r\nexport const verifyResetCode = async (email: string, code: string) => {\r\n    const res = await fetch(apiRoutes.auths.verifyResetCode, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ email, code }),\r\n    })\r\n    return await res.json()\r\n}\r\n\r\nexport const resetPassword = async (email: string, newPassword: string) => {\r\n    const res = await fetch(apiRoutes.auths.resetPassword, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ email, newPassword }),\r\n    })\r\n    return await res.json()\r\n}\r\n\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem(\"authToken\")\r\n    localStorage.removeItem(\"refreshToken\")\r\n    localStorage.removeItem(\"user\")\r\n}\r\n\r\nexport const isAuthenticated = (): boolean => {\r\n    return localStorage.getItem(\"authToken\") !== null\r\n}\r\n\r\nexport const getCurrentUser = () => {\r\n    const userStr = localStorage.getItem(\"user\")\r\n    if (!userStr) return null\r\n\r\n    try {\r\n        return JSON.parse(userStr)\r\n    } catch (e) {\r\n        return null\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}