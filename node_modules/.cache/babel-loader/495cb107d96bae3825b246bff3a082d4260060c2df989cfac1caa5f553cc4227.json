{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\ccv-movie-frontend\\\\src\\\\users\\\\pages\\\\ResetPasswordPage.tsx\",\n  _s = $RefreshSig$();\n// src/pages/auth/ResetPasswordPage.tsx\nimport React, { useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport InputField from \"../../components/InputField\";\nimport { resetPassword } from \"../../services/authService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResetPasswordPage = () => {\n  _s();\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n  const location = useLocation();\n  const email = new URLSearchParams(location.search).get(\"email\");\n  const handleReset = async e => {\n    e.preventDefault();\n    if (!email || !password || password !== confirmPassword) {\n      setError(\"Passwords must match and be filled in.\");\n      return;\n    }\n    try {\n      const res = await resetPassword(email, password);\n      if (res.success) {\n        navigate(\"/login\");\n      } else {\n        setError(res.message || \"Reset failed.\");\n      }\n    } catch {\n      setError(\"Something went wrong.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleReset,\n      children: [/*#__PURE__*/_jsxDEV(InputField, {\n        label: \"New Password\",\n        type: \"password\",\n        value: password,\n        onChange: setPassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(InputField, {\n        label: \"Confirm Password\",\n        type: \"password\",\n        value: confirmPassword,\n        onChange: setConfirmPassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(ResetPasswordPage, \"/eSdX/NiDGHUMVNYoGk7Jpc+N98=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = ResetPasswordPage;\nexport default ResetPasswordPage;\nvar _c;\n$RefreshReg$(_c, \"ResetPasswordPage\");","map":{"version":3,"names":["React","useState","useNavigate","useLocation","InputField","resetPassword","jsxDEV","_jsxDEV","ResetPasswordPage","_s","password","setPassword","confirmPassword","setConfirmPassword","error","setError","navigate","location","email","URLSearchParams","search","get","handleReset","e","preventDefault","res","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","label","type","value","onChange","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/GitHub/ccv-movie-frontend/src/users/pages/ResetPasswordPage.tsx"],"sourcesContent":["// src/pages/auth/ResetPasswordPage.tsx\r\nimport React, { useState } from \"react\"\r\nimport { useNavigate, useLocation } from \"react-router-dom\"\r\nimport InputField from \"../../components/InputField\"\r\nimport { resetPassword } from \"../../services/authService\"\r\n\r\nconst ResetPasswordPage = () => {\r\n    const [password, setPassword] = useState(\"\")\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\r\n    const [error, setError] = useState(\"\")\r\n\r\n    const navigate = useNavigate()\r\n    const location = useLocation()\r\n    const email = new URLSearchParams(location.search).get(\"email\")\r\n\r\n    const handleReset = async (e: React.FormEvent) => {\r\n        e.preventDefault()\r\n        if (!email || !password || password !== confirmPassword) {\r\n            setError(\"Passwords must match and be filled in.\")\r\n            return\r\n        }\r\n\r\n        try {\r\n            const res = await resetPassword(email, password)\r\n            if (res.success) {\r\n                navigate(\"/login\")\r\n            } else {\r\n                setError(res.message || \"Reset failed.\")\r\n            }\r\n        } catch {\r\n            setError(\"Something went wrong.\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-page-container\">\r\n            <h2>Reset Password</h2>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n            <form onSubmit={handleReset}>\r\n                <InputField label=\"New Password\" type=\"password\" value={password} onChange={setPassword} />\r\n                <InputField label=\"Confirm Password\" type=\"password\" value={confirmPassword} onChange={setConfirmPassword} />\r\n                <button type=\"submit\">Reset Password</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResetPasswordPage\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}