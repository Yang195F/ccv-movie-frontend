{"ast":null,"code":"import apiRoutes from \"../config/apiRoutes\";\nexport const login = async (userId, password) => {\n  try {\n    const response = await fetch(apiRoutes.auth.login, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        UserId: userId,\n        Password: password\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        success: false,\n        message: data.message || \"Login failed. Please check your credentials.\"\n      };\n    }\n    return {\n      success: true,\n      data: {\n        token: data.token,\n        refreshToken: data.refreshToken,\n        user: data.user\n      }\n    };\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    return {\n      success: false,\n      message: error.message || \"An unknown error occurred\"\n    };\n  }\n};\nexport const register = async (userId, password, name, email) => {\n  try {\n    const response = await fetch(apiRoutes.auth.register, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        UserId: userId,\n        Password: password,\n        Name: name,\n        Email: email\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        success: false,\n        message: data.message || \"Registration failed!\"\n      };\n    }\n    return {\n      success: true,\n      data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || \"An unknown error occurred\"\n    };\n  }\n};\nexport const refreshToken = async refreshToken => {\n  try {\n    const response = await fetch(apiRoutes.auth.refresh, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        RefreshToken: refreshToken\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        success: false,\n        message: data.message || \"Token refresh failed\"\n      };\n    }\n    return {\n      success: true,\n      data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || \"An unknown error occurred\"\n    };\n  }\n};\nexport const logout = () => {\n  localStorage.removeItem(\"authToken\");\n  localStorage.removeItem(\"refreshToken\");\n  localStorage.removeItem(\"user\");\n};\nexport const isAuthenticated = () => {\n  return localStorage.getItem(\"authToken\") !== null;\n};\nexport const getCurrentUser = () => {\n  const userStr = localStorage.getItem(\"user\");\n  if (!userStr) return null;\n  try {\n    return JSON.parse(userStr);\n  } catch (e) {\n    return null;\n  }\n};","map":{"version":3,"names":["apiRoutes","login","userId","password","response","fetch","auth","method","headers","body","JSON","stringify","UserId","Password","data","json","ok","success","message","token","refreshToken","user","error","console","register","name","email","Name","Email","refresh","RefreshToken","logout","localStorage","removeItem","isAuthenticated","getItem","getCurrentUser","userStr","parse","e"],"sources":["C:/Users/User/Documents/GitHub/ccv-movie-frontend/src/services/authService.ts"],"sourcesContent":["import apiRoutes from \"../config/apiRoutes\"\r\n\r\ninterface LoginResponse {\r\n    success: boolean\r\n    message?: string\r\n    data?: {\r\n        token: string\r\n        refreshToken: string\r\n        user: {\r\n            userId: string\r\n            name: string\r\n            email: string\r\n        }\r\n    }\r\n}\r\n\r\nexport const login = async (userId: string, password: string): Promise<LoginResponse> => {\r\n    try {\r\n        const response = await fetch(apiRoutes.auth.login, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                UserId: userId,\r\n                Password: password,\r\n            }),\r\n        })\r\n\r\n        const data = await response.json()\r\n\r\n        if (!response.ok) {\r\n            return {\r\n                success: false,\r\n                message: data.message || \"Login failed. Please check your credentials.\",\r\n            }\r\n        }\r\n\r\n        return {\r\n            success: true,\r\n            data: {\r\n                token: data.token,\r\n                refreshToken: data.refreshToken,\r\n                user: data.user,\r\n            },\r\n        }\r\n    } catch (error: any) {\r\n        console.error(\"Login error:\", error)\r\n        return {\r\n            success: false,\r\n            message: error.message || \"An unknown error occurred\",\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = async (userId: string, password: string, name: string, email: string) => {\r\n    try {\r\n        const response = await fetch(apiRoutes.auth.register, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                UserId: userId,\r\n                Password: password,\r\n                Name: name,\r\n                Email: email,\r\n            }),\r\n        })\r\n\r\n        const data = await response.json()\r\n\r\n        if (!response.ok) {\r\n            return {\r\n                success: false,\r\n                message: data.message || \"Registration failed!\",\r\n            }\r\n        }\r\n\r\n        return { success: true, data }\r\n    } catch (error: any) {\r\n        return {\r\n            success: false,\r\n            message: error.message || \"An unknown error occurred\",\r\n        }\r\n    }\r\n}\r\n\r\nexport const refreshToken = async (refreshToken: string) => {\r\n    try {\r\n        const response = await fetch(apiRoutes.auth.refresh, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                RefreshToken: refreshToken,\r\n            }),\r\n        })\r\n\r\n        const data = await response.json()\r\n\r\n        if (!response.ok) {\r\n            return {\r\n                success: false,\r\n                message: data.message || \"Token refresh failed\",\r\n            }\r\n        }\r\n\r\n        return { success: true, data }\r\n    } catch (error: any) {\r\n        return {\r\n            success: false,\r\n            message: error.message || \"An unknown error occurred\",\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem(\"authToken\")\r\n    localStorage.removeItem(\"refreshToken\")\r\n    localStorage.removeItem(\"user\")\r\n}\r\n\r\nexport const isAuthenticated = (): boolean => {\r\n    return localStorage.getItem(\"authToken\") !== null\r\n}\r\n\r\nexport const getCurrentUser = () => {\r\n    const userStr = localStorage.getItem(\"user\")\r\n    if (!userStr) return null\r\n\r\n    try {\r\n        return JSON.parse(userStr)\r\n    } catch (e) {\r\n        return null\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}