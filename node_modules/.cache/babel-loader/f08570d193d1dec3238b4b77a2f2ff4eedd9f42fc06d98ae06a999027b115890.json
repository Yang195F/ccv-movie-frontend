{"ast":null,"code":"import apiRoutes from \"../config/apiRoutes\";\nexport const bookSeats = async (screeningId, seatIds) => {\n  const userId = sessionStorage.getItem(\"userId\");\n  const token = sessionStorage.getItem(\"authToken\");\n  if (!userId || !token) {\n    return {\n      success: false,\n      message: \"Please log in to book seats.\"\n    };\n  }\n  try {\n    const response = await fetch(apiRoutes.tickets.book, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        userId,\n        screeningId,\n        seatIds\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) throw new Error(data.message || \"Booking failed\");\n    return {\n      success: true,\n      data: data.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message\n    };\n  }\n};","map":{"version":3,"names":["apiRoutes","bookSeats","screeningId","seatIds","userId","sessionStorage","getItem","token","success","message","response","fetch","tickets","book","method","headers","Authorization","body","JSON","stringify","data","json","ok","Error","error"],"sources":["C:/Users/User/Documents/GitHub/ccv-movie-frontend/src/services/bookingService.ts"],"sourcesContent":["import apiRoutes from \"../config/apiRoutes\";\r\n\r\nexport const bookSeats = async (screeningId: string, seatIds: string[]) => {\r\n    const userId = sessionStorage.getItem(\"userId\");\r\n    const token = sessionStorage.getItem(\"authToken\");\r\n\r\n    if (!userId || !token) {\r\n        return { success: false, message: \"Please log in to book seats.\" };\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(apiRoutes.tickets.book, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({ userId, screeningId, seatIds }),\r\n        });\r\n\r\n        const data = await response.json();\r\n        if (!response.ok) throw new Error(data.message || \"Booking failed\");\r\n\r\n        return { success: true, data: data.data };\r\n    } catch (error: any) {\r\n        return { success: false, message: error.message };\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,qBAAqB;AAE3C,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOC,WAAmB,EAAEC,OAAiB,KAAK;EACvE,MAAMC,MAAM,GAAGC,cAAc,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC/C,MAAMC,KAAK,GAAGF,cAAc,CAACC,OAAO,CAAC,WAAW,CAAC;EAEjD,IAAI,CAACF,MAAM,IAAI,CAACG,KAAK,EAAE;IACnB,OAAO;MAAEC,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAA+B,CAAC;EACtE;EAEA,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACX,SAAS,CAACY,OAAO,CAACC,IAAI,EAAE;MACjDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUT,KAAK;MAClC,CAAC;MACDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEf,MAAM;QAAEF,WAAW;QAAEC;MAAQ,CAAC;IACzD,CAAC,CAAC;IAEF,MAAMiB,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC,IAAI,CAACX,QAAQ,CAACY,EAAE,EAAE,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACX,OAAO,IAAI,gBAAgB,CAAC;IAEnE,OAAO;MAAED,OAAO,EAAE,IAAI;MAAEY,IAAI,EAAEA,IAAI,CAACA;IAAK,CAAC;EAC7C,CAAC,CAAC,OAAOI,KAAU,EAAE;IACjB,OAAO;MAAEhB,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAEe,KAAK,CAACf;IAAQ,CAAC;EACrD;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}