{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iamfo\\\\Documents\\\\ccv-movie-frontend\\\\src\\\\components\\\\DateTab.tsx\",\n  _s = $RefreshSig$();\n// components/DateTabBar.tsx\nimport React, { useMemo } from \"react\";\nimport \"../../styles/date_tab.css\"; // adjust path if needed\nimport { mockMovies } from \"../data/mockData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DateTabBar = ({\n  selectedDate,\n  onDateSelect,\n  filterPastDates = true\n}) => {\n  _s();\n  const todayISO = new Date().toISOString().split(\"T\")[0];\n  const availableDates = useMemo(() => {\n    const rawDates = mockMovies.flatMap(movie => {\n      var _movie$screenings;\n      return ((_movie$screenings = movie.screenings) === null || _movie$screenings === void 0 ? void 0 : _movie$screenings.flatMap(screening => {\n        var _screening$sessions;\n        return ((_screening$sessions = screening.sessions) === null || _screening$sessions === void 0 ? void 0 : _screening$sessions.map(session => session.date)) || [];\n      })) || [];\n    });\n    const uniqueDates = Array.from(new Set(rawDates));\n    const sortedDates = uniqueDates.filter(d => !filterPastDates || new Date(d) >= new Date(todayISO)).sort((a, b) => new Date(a).getTime() - new Date(b).getTime());\n    return sortedDates;\n  }, [filterPastDates]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"date-tab-bar\",\n    children: availableDates.map(date => {\n      const label = new Date(date).toLocaleDateString(\"en\", {\n        weekday: \"short\",\n        day: \"numeric\",\n        month: \"short\"\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `date-tab ${selectedDate === date ? \"active\" : \"\"}`,\n        onClick: () => onDateSelect(date),\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"date-text\",\n          children: label.toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, date, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(DateTabBar, \"ClbQcivwDtzahgd+rjyWqVBjvC8=\");\n_c = DateTabBar;\nexport default DateTabBar;\nvar _c;\n$RefreshReg$(_c, \"DateTabBar\");","map":{"version":3,"names":["React","useMemo","mockMovies","jsxDEV","_jsxDEV","DateTabBar","selectedDate","onDateSelect","filterPastDates","_s","todayISO","Date","toISOString","split","availableDates","rawDates","flatMap","movie","_movie$screenings","screenings","screening","_screening$sessions","sessions","map","session","date","uniqueDates","Array","from","Set","sortedDates","filter","d","sort","a","b","getTime","className","children","label","toLocaleDateString","weekday","day","month","onClick","toUpperCase","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/iamfo/Documents/ccv-movie-frontend/src/components/DateTab.tsx"],"sourcesContent":["// components/DateTabBar.tsx\r\nimport React, { useMemo } from \"react\";\r\nimport \"../../styles/date_tab.css\"; // adjust path if needed\r\nimport { mockMovies } from \"../data/mockData\";\r\n\r\ninterface DateTabBarProps {\r\n  selectedDate: string;\r\n  onDateSelect: (date: string) => void;\r\n  filterPastDates?: boolean; // optional toggle\r\n}\r\n\r\nconst DateTabBar: React.FC<DateTabBarProps> = ({\r\n  selectedDate,\r\n  onDateSelect,\r\n  filterPastDates = true,\r\n}) => {\r\n  const todayISO = new Date().toISOString().split(\"T\")[0];\r\n\r\n  const availableDates = useMemo(() => {\r\n    const rawDates = mockMovies.flatMap(\r\n      (movie) =>\r\n        movie.screenings?.flatMap(\r\n          (screening) =>\r\n            screening.sessions?.map((session) => session.date) || []\r\n        ) || []\r\n    );\r\n\r\n    const uniqueDates = Array.from(new Set(rawDates));\r\n\r\n    const sortedDates = uniqueDates\r\n      .filter((d) => !filterPastDates || new Date(d) >= new Date(todayISO))\r\n      .sort((a, b) => new Date(a).getTime() - new Date(b).getTime());\r\n\r\n    return sortedDates;\r\n  }, [filterPastDates]);\r\n\r\n  return (\r\n    <div className=\"date-tab-bar\">\r\n      {availableDates.map((date) => {\r\n        const label = new Date(date).toLocaleDateString(\"en\", {\r\n          weekday: \"short\",\r\n          day: \"numeric\",\r\n          month: \"short\",\r\n        });\r\n\r\n        return (\r\n          <div\r\n            key={date}\r\n            className={`date-tab ${selectedDate === date ? \"active\" : \"\"}`}\r\n            onClick={() => onDateSelect(date)}\r\n          >\r\n            <span className=\"date-text\">{label.toUpperCase()}</span>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateTabBar;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AACtC,OAAO,2BAA2B,CAAC,CAAC;AACpC,SAASC,UAAU,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ9C,MAAMC,UAAqC,GAAGA,CAAC;EAC7CC,YAAY;EACZC,YAAY;EACZC,eAAe,GAAG;AACpB,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,QAAQ,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAEvD,MAAMC,cAAc,GAAGb,OAAO,CAAC,MAAM;IACnC,MAAMc,QAAQ,GAAGb,UAAU,CAACc,OAAO,CAChCC,KAAK;MAAA,IAAAC,iBAAA;MAAA,OACJ,EAAAA,iBAAA,GAAAD,KAAK,CAACE,UAAU,cAAAD,iBAAA,uBAAhBA,iBAAA,CAAkBF,OAAO,CACtBI,SAAS;QAAA,IAAAC,mBAAA;QAAA,OACR,EAAAA,mBAAA,GAAAD,SAAS,CAACE,QAAQ,cAAAD,mBAAA,uBAAlBA,mBAAA,CAAoBE,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACC,IAAI,CAAC,KAAI,EAAE;MAAA,CAC5D,CAAC,KAAI,EAAE;IAAA,CACX,CAAC;IAED,MAAMC,WAAW,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAACd,QAAQ,CAAC,CAAC;IAEjD,MAAMe,WAAW,GAAGJ,WAAW,CAC5BK,MAAM,CAAEC,CAAC,IAAK,CAACxB,eAAe,IAAI,IAAIG,IAAI,CAACqB,CAAC,CAAC,IAAI,IAAIrB,IAAI,CAACD,QAAQ,CAAC,CAAC,CACpEuB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIxB,IAAI,CAACuB,CAAC,CAAC,CAACE,OAAO,CAAC,CAAC,GAAG,IAAIzB,IAAI,CAACwB,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC;IAEhE,OAAON,WAAW;EACpB,CAAC,EAAE,CAACtB,eAAe,CAAC,CAAC;EAErB,oBACEJ,OAAA;IAAKiC,SAAS,EAAC,cAAc;IAAAC,QAAA,EAC1BxB,cAAc,CAACS,GAAG,CAAEE,IAAI,IAAK;MAC5B,MAAMc,KAAK,GAAG,IAAI5B,IAAI,CAACc,IAAI,CAAC,CAACe,kBAAkB,CAAC,IAAI,EAAE;QACpDC,OAAO,EAAE,OAAO;QAChBC,GAAG,EAAE,SAAS;QACdC,KAAK,EAAE;MACT,CAAC,CAAC;MAEF,oBACEvC,OAAA;QAEEiC,SAAS,EAAE,YAAY/B,YAAY,KAAKmB,IAAI,GAAG,QAAQ,GAAG,EAAE,EAAG;QAC/DmB,OAAO,EAAEA,CAAA,KAAMrC,YAAY,CAACkB,IAAI,CAAE;QAAAa,QAAA,eAElClC,OAAA;UAAMiC,SAAS,EAAC,WAAW;UAAAC,QAAA,EAAEC,KAAK,CAACM,WAAW,CAAC;QAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO;MAAC,GAJnDxB,IAAI;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKN,CAAC;IAEV,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACxC,EAAA,CA9CIJ,UAAqC;AAAA6C,EAAA,GAArC7C,UAAqC;AAgD3C,eAAeA,UAAU;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}